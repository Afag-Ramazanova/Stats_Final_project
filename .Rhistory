)
# Scatter plot
ggplot(cleaned_data, aes(x = age, y = urate, color = armed, shape = armed)) +
geom_point(size = 3, alpha = 0.5) +
labs(
title = "Scatter Plot of Unemployment Rate vs. Age by Armed Status",
x = "Age",
y = "Unemployment Rate (%)",
color = "Armed Status",
shape = "Armed Status"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5)
)
# Plot 2: Relationship between 'armed' and 'age'
plot4 <- ggplot(cleaned_data, aes(x = armed, y = age)) +
geom_boxplot(fill = "lightblue", outlier.colour = "red", outlier.shape = 1) +
geom_jitter(width = 0.2, alpha = 0.2) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Relationship between Armed Status and Age",
x = "Armed Status",
y = "Age")
plot4
# Plot 2: Relationship between 'armed' and 'age'
plot4 <- ggplot(cleaned_data, aes(x = armed, y = urate)) +
geom_boxplot(fill = "lightblue", outlier.colour = "red", outlier.shape = 1) +
geom_jitter(width = 0.2, alpha = 0.2) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Relationship between Armed Status and Unemplyement Rate",
x = "Armed Status",
y = "Unemployment Rate")
plot5
# Plot 2: Relationship between 'armed' and 'age'
plot5 <- ggplot(cleaned_data, aes(x = armed, y = urate)) +
geom_boxplot(fill = "lightblue", outlier.colour = "red", outlier.shape = 1) +
geom_jitter(width = 0.2, alpha = 0.2) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Relationship between Armed Status and Unemplyement Rate",
x = "Armed Status",
y = "Unemployment Rate")
plot5
# Armed Status Distribution
armed_counts <- table(cleaned_data$armed)
armed_percentages <- prop.table(armed_counts) * 100
armed_summary <- data.frame(
Armed_Status = names(armed_counts),
Count = as.integer(armed_counts),
Percentage = round(as.numeric(armed_percentages), 2) # Round percentages for clarity
)
pander(armed_summary, caption  = "Armed Status Distribution")
# Plot 1: Distribution of Armed Status
plot3 <- ggplot(cleaned_data, aes(x = armed)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Armed Status", x = "Armed Status", y = "Count")
plot3
pander(armed_summary, caption  = "Armed Status Distribution")
# Scatter plot
ggplot(cleaned_data, aes(x = age, y = urate, color = armed, shape = armed)) +
geom_point(size = 3, alpha = 0.5) +
labs(
title = "Scatter Plot: Unemployment Rate vs. Age by Armed Status",
x = "Age",
y = "Unemployment Rate (%)",
color = "Armed Status",
shape = "Armed Status"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5)
)
# Scatter plot
ggplot(cleaned_data, aes(x = age, y = urate, color = armed, shape = armed)) +
geom_point(size = 3, alpha = 0.5) +
labs(
title = "Scatter Plot: Unemployment Rate vs. Age by Armed Status",
x = "Age",
y = "Unemployment Rate (%)",
color = "Armed Status",
shape = "Armed Status"
) +
theme_minimal(base_size = 15) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5)
)
# Scatter plot
ggplot(cleaned_data, aes(x = age, y = urate, color = armed, shape = armed)) +
geom_point(size = 3, alpha = 0.5) +
labs(
title = "Scatter Plot: Unemployment Rate vs. Age by Armed Status",
x = "Age",
y = "Unemployment Rate (%)",
color = "Armed Status",
shape = "Armed Status"
) +
theme_minimal(base_size = 17) +
theme(
legend.position = "top",
plot.title = element_text(hjust = 0.5)
)
# Diagnostic plots
par(mfrow = c(2, 2),  mar = c(5, 5, 4, 2)) # Set plotting area to 2x2
### 2. Research Question 2 Initial Model
```{r rq2-model, fig.height = 6,  fig.width - 10}
### 2. Research Question 2 Initial Model
```{r rq2-model, fig.height = 6,  fig.width = 10, echo=TRUE}
# Logistic regression
library(car)
rq2_model <- glm(
armed ~ (age + urate +  college + pov)^2,  data = cleaned_data,
family = binomial
)
# Display the summary of the updated model
pander(summary(rq2_model))
# Check for multicollinearity using Variance Inflation Factor (VIF)
vif_values <- vif(rq2_model)
print(vif_values)
# Diagnostic plots
par(mfrow = c(2, 2),  mar = c(5, 5, 4, 2)) # Set plotting area to 2x2
# Residual vs Fitted
plot(rq2_model$fitted.values, residuals(rq2_model, type = "deviance"),
xlab = "Fitted Values",
ylab = "Deviance Residuals",
main = "Residuals vs Fitted",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Normal Q-Q Plot
qqnorm(residuals(rq2_model, type = "deviance"),
main = "Normal Q-Q Plot of Residuals",
pch = 20, col = "blue")
qqline(residuals(rq2_model, type = "deviance"), col = "red", lty = 2)
# Scale-Location Plot
plot(rq2_model$fitted.values, sqrt(abs(residuals(rq2_model, type = "deviance"))),
xlab = "Fitted Values",
ylab = "Sqrt |Deviance Residuals|",
main = "Scale-Location Plot",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Cook's Distance
plot(cooks.distance(rq2_model),
xlab = "Index",
ylab = "Cook's Distance",
main = "Cook's Distance",
pch = 20, col = "blue")
abline(h = 4/(nrow(cleaned_data) - length(rq2_model$coefficients)), col = "red", lty = 2)
par(mfrow = c(1, 1)) # Reset plotting area
# Confusion Matrix for Model Evaluation
rq2_model_pred <- ifelse(predict(rq2_model, type = "response") > 0.5, 1, 0)
rq2_model_pred_fac <- factor(rq2_model_pred, levels = c(0, 1), labels = c("No", "Yes"))
conf_matrix <- confusionMatrix(
table(rq2_model_pred_fac, cleaned_data$armed),
positive = "Yes",
mode = "everything"
)
pander(conf_matrix)
# Logistic regression
library(car)
rq2_model <- glm(
armed ~ (age + urate +  college + pov)^2,  data = cleaned_data,
family = binomial
)
# Display the summary of the updated model
pander(summary(rq2_model))
# Check for multicollinearity using Variance Inflation Factor (VIF)
vif_values <- vif(rq2_model)
print(vif_values)
# Diagnostic plots
par(mfrow = c(2, 2),  mar = c(5, 5, 4, 2)) # Set plotting area to 2x2
# Residual vs Fitted
plot(rq2_model$fitted.values, residuals(rq2_model, type = "deviance"),
xlab = "Fitted Values",
ylab = "Deviance Residuals",
main = "Residuals vs Fitted",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Normal Q-Q Plot
qqnorm(residuals(rq2_model, type = "deviance"),
main = "Normal Q-Q Plot of Residuals",
pch = 20, col = "blue")
qqline(residuals(rq2_model, type = "deviance"), col = "red", lty = 2)
# Scale-Location Plot
plot(rq2_model$fitted.values, sqrt(abs(residuals(rq2_model, type = "deviance"))),
xlab = "Fitted Values",
ylab = "Sqrt |Deviance Residuals|",
main = "Scale-Location Plot",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Cook's Distance
plot(cooks.distance(rq2_model),
xlab = "Index",
ylab = "Cook's Distance",
main = "Cook's Distance",
pch = 20, col = "blue")
abline(h = 4/(nrow(cleaned_data) - length(rq2_model$coefficients)), col = "red", lty = 2)
par(mfrow = c(1, 1)) # Reset plotting area
# Confusion Matrix for Model Evaluation
rq2_model_pred <- ifelse(predict(rq2_model, type = "response") > 0.5, 1, 0)
rq2_model_pred_fac <- factor(rq2_model_pred, levels = c(0, 1), labels = c("No", "Yes"))
conf_matrix <- confusionMatrix(
table(rq2_model_pred_fac, cleaned_data$armed),
positive = "Yes",
mode = "everything"
)
pander(conf_matrix)
# Logistic regression
library(car)
rq2_model <- glm(
armed ~ (age + urate +  college + pov)^2,  data = cleaned_data,
family = binomial
)
# # Display the summary of the updated model
# pander(summary(rq2_model))
# Check for multicollinearity using Variance Inflation Factor (VIF)
vif_values <- vif(rq2_model)
pander(vif_values, title = "Variable Inflation Factor")
# Diagnostic plots
par(mfrow = c(2, 2),  mar = c(5, 5, 4, 2)) # Set plotting area to 2x2
# Residual vs Fitted
plot(rq2_model$fitted.values, residuals(rq2_model, type = "deviance"),
xlab = "Fitted Values",
ylab = "Deviance Residuals",
main = "Residuals vs Fitted",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Normal Q-Q Plot
qqnorm(residuals(rq2_model, type = "deviance"),
main = "Normal Q-Q Plot of Residuals",
pch = 20, col = "blue")
qqline(residuals(rq2_model, type = "deviance"), col = "red", lty = 2)
# Scale-Location Plot
plot(rq2_model$fitted.values, sqrt(abs(residuals(rq2_model, type = "deviance"))),
xlab = "Fitted Values",
ylab = "Sqrt |Deviance Residuals|",
main = "Scale-Location Plot",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Cook's Distance
plot(cooks.distance(rq2_model),
xlab = "Index",
ylab = "Cook's Distance",
main = "Cook's Distance",
pch = 20, col = "blue")
abline(h = 4/(nrow(cleaned_data) - length(rq2_model$coefficients)), col = "red", lty = 2)
par(mfrow = c(1, 1)) # Reset plotting area
# Confusion Matrix for Model Evaluation
rq2_model_pred <- ifelse(predict(rq2_model, type = "response") > 0.5, 1, 0)
rq2_model_pred_fac <- factor(rq2_model_pred, levels = c(0, 1), labels = c("No", "Yes"))
conf_matrix <- confusionMatrix(
table(rq2_model_pred_fac, cleaned_data$armed),
positive = "Yes",
mode = "everything"
)
pander(conf_matrix)
# Logistic regression
library(car)
rq2_model <- glm(
armed ~ (age + urate +  college + pov)^2,  data = cleaned_data,
family = binomial
)
# # Display the summary of the updated model
# pander(summary(rq2_model))
# Check for multicollinearity using Variance Inflation Factor (VIF)
vif_values <- vif(rq2_model)
pander(vif_values, caption  = "Variable Inflation Factor")
# Diagnostic plots
par(mfrow = c(2, 2),  mar = c(5, 5, 4, 2)) # Set plotting area to 2x2
# Residual vs Fitted
plot(rq2_model$fitted.values, residuals(rq2_model, type = "deviance"),
xlab = "Fitted Values",
ylab = "Deviance Residuals",
main = "Residuals vs Fitted",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Normal Q-Q Plot
qqnorm(residuals(rq2_model, type = "deviance"),
main = "Normal Q-Q Plot of Residuals",
pch = 20, col = "blue")
qqline(residuals(rq2_model, type = "deviance"), col = "red", lty = 2)
# Scale-Location Plot
plot(rq2_model$fitted.values, sqrt(abs(residuals(rq2_model, type = "deviance"))),
xlab = "Fitted Values",
ylab = "Sqrt |Deviance Residuals|",
main = "Scale-Location Plot",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Cook's Distance
plot(cooks.distance(rq2_model),
xlab = "Index",
ylab = "Cook's Distance",
main = "Cook's Distance",
pch = 20, col = "blue")
abline(h = 4/(nrow(cleaned_data) - length(rq2_model$coefficients)), col = "red", lty = 2)
par(mfrow = c(1, 1)) # Reset plotting area
# Confusion Matrix for Model Evaluation
rq2_model_pred <- ifelse(predict(rq2_model, type = "response") > 0.5, 1, 0)
rq2_model_pred_fac <- factor(rq2_model_pred, levels = c(0, 1), labels = c("No", "Yes"))
conf_matrix <- confusionMatrix(
table(rq2_model_pred_fac, cleaned_data$armed),
positive = "Yes",
mode = "everything"
)
pander(conf_matrix)
# Cook's Distance threshold
cooks_threshold <- 4 / nrow(cleaned_data)
cooks_values <- cooks.distance(rq2_model)
# Identify influential observations
influential_points <- which(cooks_values > cooks_threshold)
# Remove influential observations
cleaned_data_refit <- cleaned_data[-influential_points, ]
# Refit the logistic regression model
rq2_model_refit <- glm(
armed ~ (age + urate + college + pov)^2,
data = cleaned_data_refit,
family = binomial
)
# Summary of refitted model
pander(summary(rq2_model_refit))
# Re-check model assumptions with diagnostic plots
par(mfrow = c(2, 2))
plot(rq2_model_refit)
par(mfrow = c(1, 1))
# Check for significance
if (any(summary(rq2_model_refit)$coefficients[, 4] < 0.05)) {
print("Significant relationships were found after removing outliers.")
} else {
print("Results remain insignificant; no significant relationships observed.")
}
# Calculate Cook's Distance for refitted model
cooks_values_refit <- cooks.distance(rq2_model_refit)
# Plot Cook's Distance
plot(
cooks_values_refit,
pch = 20,
cex = 1,
col = "blue",
main = "Cook's Distance After Removing Outliers",
ylab = "Cook's Distance",
xlab = "Observation Index"
)
abline(h = cooks_threshold, col = "red", lty = 2) # Threshold line
text(
x = which(cooks_values_refit > cooks_threshold),
y = cooks_values_refit[cooks_values_refit > cooks_threshold],
labels = which(cooks_values_refit > cooks_threshold),
pos = 3,
cex = 0.7,
col = "red"
)
# Logistic regression
library(car)
rq2_model <- glm(
armed ~ (age + urate +  college + pov)^2,  data = cleaned_data,
family = binomial
)
# # Display the summary of the updated model
# pander(summary(rq2_model))
# Compute and display confidence intervals for the coefficients
ci <- confint(rq2_model_refit)
pander(ci, caption = "Confidence Intervals for Coefficients")
# Check for multicollinearity using Variance Inflation Factor (VIF)
vif_values <- vif(rq2_model)
pander(vif_values, caption  = "Variable Inflation Factor")
# Diagnostic plots
par(mfrow = c(2, 2),  mar = c(5, 5, 4, 2)) # Set plotting area to 2x2
# Residual vs Fitted
plot(rq2_model$fitted.values, residuals(rq2_model, type = "deviance"),
xlab = "Fitted Values",
ylab = "Deviance Residuals",
main = "Residuals vs Fitted",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Normal Q-Q Plot
qqnorm(residuals(rq2_model, type = "deviance"),
main = "Normal Q-Q Plot of Residuals",
pch = 20, col = "blue")
qqline(residuals(rq2_model, type = "deviance"), col = "red", lty = 2)
# Scale-Location Plot
plot(rq2_model$fitted.values, sqrt(abs(residuals(rq2_model, type = "deviance"))),
xlab = "Fitted Values",
ylab = "Sqrt |Deviance Residuals|",
main = "Scale-Location Plot",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Cook's Distance
plot(cooks.distance(rq2_model),
xlab = "Index",
ylab = "Cook's Distance",
main = "Cook's Distance",
pch = 20, col = "blue")
abline(h = 4/(nrow(cleaned_data) - length(rq2_model$coefficients)), col = "red", lty = 2)
par(mfrow = c(1, 1)) # Reset plotting area
# Confusion Matrix for Model Evaluation
rq2_model_pred <- ifelse(predict(rq2_model, type = "response") > 0.5, 1, 0)
rq2_model_pred_fac <- factor(rq2_model_pred, levels = c(0, 1), labels = c("No", "Yes"))
conf_matrix <- confusionMatrix(
table(rq2_model_pred_fac, cleaned_data$armed),
positive = "Yes",
mode = "everything"
)
pander(conf_matrix)
# Logistic regression
library(car)
rq2_model <- glm(
armed ~ (age + urate +  college + pov)^2,  data = cleaned_data,
family = binomial
)
# # Display the summary of the updated model
# pander(summary(rq2_model))
# Compute and display confidence intervals for the coefficients
ci <- confint(rq2_model_refit)
pander(ci, caption = "Confidence Intervals for Coefficients")
# Check for multicollinearity using Variance Inflation Factor (VIF)
vif_values <- vif(rq2_model)
pander(vif_values, caption  = "Variable Inflation Factor")
# Diagnostic plots
par(mfrow = c(2, 2),  mar = c(5, 5, 4, 2)) # Set plotting area to 2x2
# Residual vs Fitted
plot(rq2_model$fitted.values, residuals(rq2_model, type = "deviance"),
xlab = "Fitted Values",
ylab = "Deviance Residuals",
main = "Residuals vs Fitted",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Normal Q-Q Plot
qqnorm(residuals(rq2_model, type = "deviance"),
main = "Normal Q-Q Plot of Residuals",
pch = 20, col = "blue")
qqline(residuals(rq2_model, type = "deviance"), col = "red", lty = 2)
# Scale-Location Plot
plot(rq2_model$fitted.values, sqrt(abs(residuals(rq2_model, type = "deviance"))),
xlab = "Fitted Values",
ylab = "Sqrt |Deviance Residuals|",
main = "Scale-Location Plot",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Cook's Distance
plot(cooks.distance(rq2_model),
xlab = "Index",
ylab = "Cook's Distance",
main = "Cook's Distance",
pch = 20, col = "blue")
abline(h = 4/(nrow(cleaned_data) - length(rq2_model$coefficients)), col = "red", lty = 2)
par(mfrow = c(1, 1)) # Reset plotting area
# Confusion Matrix for Model Evaluation
rq2_model_pred <- ifelse(predict(rq2_model, type = "response") > 0.5, 1, 0)
rq2_model_pred_fac <- factor(rq2_model_pred, levels = c(0, 1), labels = c("No", "Yes"))
conf_matrix <- confusionMatrix(
table(rq2_model_pred_fac, cleaned_data$armed),
positive = "Yes",
mode = "everything"
)
pander(conf_matrix)
# Logistic regression
library(car)
rq2_model <- glm(
armed ~ (age + urate +  college + pov)^2,  data = cleaned_data,
family = binomial
)
# # Display the summary of the updated model
# pander(summary(rq2_model))
# Compute and display confidence intervals for the coefficients
ci <- confint(rq2_model)
pander(ci, caption = "Confidence Intervals for Coefficients")
#
# Check for multicollinearity using Variance Inflation Factor (VIF)
vif_values <- vif(rq2_model)
pander(vif_values, caption  = "Variable Inflation Factor")
# Diagnostic plots
par(mfrow = c(2, 2),  mar = c(5, 5, 4, 2)) # Set plotting area to 2x2
# Residual vs Fitted
plot(rq2_model$fitted.values, residuals(rq2_model, type = "deviance"),
xlab = "Fitted Values",
ylab = "Deviance Residuals",
main = "Residuals vs Fitted",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Normal Q-Q Plot
qqnorm(residuals(rq2_model, type = "deviance"),
main = "Normal Q-Q Plot of Residuals",
pch = 20, col = "blue")
qqline(residuals(rq2_model, type = "deviance"), col = "red", lty = 2)
# Scale-Location Plot
plot(rq2_model$fitted.values, sqrt(abs(residuals(rq2_model, type = "deviance"))),
xlab = "Fitted Values",
ylab = "Sqrt |Deviance Residuals|",
main = "Scale-Location Plot",
pch = 20, col = "blue")
abline(h = 0, col = "red", lty = 2)
# Cook's Distance
plot(cooks.distance(rq2_model),
xlab = "Index",
ylab = "Cook's Distance",
main = "Cook's Distance",
pch = 20, col = "blue")
abline(h = 4/(nrow(cleaned_data) - length(rq2_model$coefficients)), col = "red", lty = 2)
par(mfrow = c(1, 1)) # Reset plotting area
# Confusion Matrix for Model Evaluation
rq2_model_pred <- ifelse(predict(rq2_model, type = "response") > 0.5, 1, 0)
rq2_model_pred_fac <- factor(rq2_model_pred, levels = c(0, 1), labels = c("No", "Yes"))
conf_matrix <- confusionMatrix(
table(rq2_model_pred_fac, cleaned_data$armed),
positive = "Yes",
mode = "everything"
)
pander(conf_matrix)
